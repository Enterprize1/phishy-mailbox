generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Email {
  id                   String               @id @default(uuid()) @db.Uuid
  senderMail           String
  senderName           String
  subject              String
  headers              String
  body                 String
  allowExternalImages  Boolean              @default(false)
  backofficeIdentifier String
  StudyEmail           StudyEmail[]
  ParticipationEmail   ParticipationEmail[]
}

model Folder {
  id                 String               @id @default(uuid()) @db.Uuid
  studyId            String               @db.Uuid
  name               String
  order              Int
  study              Study                @relation(fields: [studyId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "folder_study_id_study_id_fk")
  ParticipationEmail ParticipationEmail[]
}

model Participation {
  id                 String               @id @default(uuid()) @db.Uuid
  code               String               @unique(map: "code_idx")
  studyId            String               @db.Uuid
  study              Study                @relation(fields: [studyId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "participation_study_id_study_id_fk")
  createdAt          DateTime             @db.Timestamptz(3)
  codeUsedAt         DateTime?            @db.Timestamptz(3)
  consentGivenAt     DateTime?            @db.Timestamptz(3)
  startedAt          DateTime?            @db.Timestamptz(3)
  finishedAt         DateTime?            @db.Timestamptz(3)
  startLinkClickedAt DateTime?            @db.Timestamptz(3)
  endLinkClickedAt   DateTime?            @db.Timestamptz(3)
  emails             ParticipationEmail[]
}

model ParticipationEmail {
  id              String                    @id @default(uuid()) @db.Uuid
  participationId String                    @db.Uuid
  participation   Participation             @relation(fields: [participationId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "participation_email_participation_id_participation_id_fk")
  emailId         String                    @db.Uuid
  email           Email                     @relation(fields: [emailId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "participation_email_email_id_email_id_fk")
  folderId        String?                   @db.Uuid
  folder          Folder?                   @relation(fields: [folderId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "participation_email_folder_id_folder_id_fk")
  events          ParticipationEmailEvent[]
}

model ParticipationEmailEvent {
  id                   String             @id @default(uuid()) @db.Uuid
  participationEmailId String             @db.Uuid
  participationEmail   ParticipationEmail @relation(fields: [participationEmailId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "participation_email_event_participation_email_id_fk")
  data                 Json
  createdAt            DateTime           @db.Timestamptz(3)
}

model Study {
  id                String            @id @default(uuid()) @db.Uuid
  name              String
  folder            Folder[]
  participation     Participation[]
  email             StudyEmail[]
  timerMode         TimerMode         @default(VISIBLE)
  externalImageMode ExternalImageMode @default(ASK)
  durationInMinutes Int?
  openParticipation Boolean           @default(false)
  consentRequired   Boolean           @default(false)
  consentText       String?
  startText         String
  startLinkTemplate String?
  endText           String?
  endLinkTemplate   String?
}

enum ExternalImageMode {
  SHOW
  HIDE
  ASK
}

enum TimerMode {
  DISABLED
  HIDDEN
  VISIBLE
}

model StudyEmail {
  id      String @id @default(uuid()) @db.Uuid
  studyId String @db.Uuid
  study   Study  @relation(fields: [studyId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "study_email_study_id_study_id_fk")
  emailId String @db.Uuid
  email   Email  @relation(fields: [emailId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "study_email_email_id_email_id_fk")
}

model User {
  id             String    @id @default(uuid()) @db.Uuid
  email          String    @unique(map: "email_idx")
  password       String
  created_at     DateTime? @db.Timestamptz(3)
  canManageUsers Boolean   @default(true)
}
